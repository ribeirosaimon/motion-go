// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: scrapingStocks.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ScrapingService_GetCompany_FullMethodName = "/ScrapingService/GetCompany"
)

// ScrapingServiceClient is the client API for ScrapingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScrapingServiceClient interface {
	GetCompany(ctx context.Context, in *StockCode, opts ...grpc.CallOption) (*SummaryStock, error)
}

type scrapingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScrapingServiceClient(cc grpc.ClientConnInterface) ScrapingServiceClient {
	return &scrapingServiceClient{cc}
}

func (c *scrapingServiceClient) GetCompany(ctx context.Context, in *StockCode, opts ...grpc.CallOption) (*SummaryStock, error) {
	out := new(SummaryStock)
	err := c.cc.Invoke(ctx, ScrapingService_GetCompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScrapingServiceServer is the server API for ScrapingService service.
// All implementations must embed UnimplementedScrapingServiceServer
// for forward compatibility
type ScrapingServiceServer interface {
	GetCompany(context.Context, *StockCode) (*SummaryStock, error)
	mustEmbedUnimplementedScrapingServiceServer()
}

// UnimplementedScrapingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScrapingServiceServer struct {
}

func (UnimplementedScrapingServiceServer) GetCompany(context.Context, *StockCode) (*SummaryStock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompany not implemented")
}
func (UnimplementedScrapingServiceServer) mustEmbedUnimplementedScrapingServiceServer() {}

// UnsafeScrapingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScrapingServiceServer will
// result in compilation errors.
type UnsafeScrapingServiceServer interface {
	mustEmbedUnimplementedScrapingServiceServer()
}

func RegisterScrapingServiceServer(s grpc.ServiceRegistrar, srv ScrapingServiceServer) {
	s.RegisterService(&ScrapingService_ServiceDesc, srv)
}

func _ScrapingService_GetCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrapingServiceServer).GetCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScrapingService_GetCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrapingServiceServer).GetCompany(ctx, req.(*StockCode))
	}
	return interceptor(ctx, in, info, handler)
}

// ScrapingService_ServiceDesc is the grpc.ServiceDesc for ScrapingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScrapingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ScrapingService",
	HandlerType: (*ScrapingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompany",
			Handler:    _ScrapingService_GetCompany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scrapingStocks.proto",
}
